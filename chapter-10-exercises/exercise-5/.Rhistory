a_f_words <- words[ substr(tolower(words),1,1) <= "f" ]
g_m_words <- words[ substr(tolower(words),1,1) >= "g" & substr(tolower(words),1,1) <= "m" ]
print(g_m_words)
word_bin <- function(words, start_letter, end_letter){
words <- tolower(words)
start_letter <- tolower(start_letter)
end_letter <- tolower((end_letter))
words_in_bin <- words[ substr(words,1,1) >= start_letter & substr(words,1,1) <= end_letter ]
}
words <- c("uncovered",
"office",
"unfasten",
"walk",
"loving",
"glamorous",
"bare",
"ultra",
"cable",
"boundless",
"stay",
"pot")
words_of_the_day <- paste("'", words,"' is the word of the day!", sep = "")
a_f_words <- word_bin(words,"a","f")
g_m_words <- word_bin(words,"g","m")
print(a_f_words)
print(g_m_words)
word_bin <- function(words, start_letter, end_letter){
words <- tolower(words)
start_letter <- tolower(start_letter)
end_letter <- tolower((end_letter))
words_in_bin <- words[ substr(words,1,1) >= start_letter & substr(words,1,1) <= end_letter ]
}
words <- c("uncovered",
"office",
"unfasten",
"walk",
"loving",
"glamorous",
"bare",
"ultra",
"cable",
"boundless",
"stay",
"pot")
words_of_the_day <- paste("'", words,"' is the word of the day!", sep = "")
a_f_words <- word_bin(words,"a","f")
g_m_words <- word_bin(words,"g","m")
print(a_f_words)
print(g_m_words)
print(word_bin(words,"e","q"))
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points_scored = c( 24, 17, 24, 20 )
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_received = c( 27, 24, 13, 17 )
# Combine your two vectors into a dataframe called `games`
games = data.frame( points_scored, points_received )
games
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff = games$points_scored - games$points_received
diff
games <- data.frame( games, diff )
games
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games <- data.frame( games, games$points_scored - games$points_received )
games
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games <- data.frame( games, diff = games$points_scored - games$points_received )
games
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points_scored <- c( 24, 17, 24, 20 )
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_received <- c( 27, 24, 13, 17 )
# Combine your two vectors into a dataframe called `games`
games <- data.frame( points_scored, points_received )
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games <- data.frame( games, diff = games$points_scored - games$points_received )
# Create a new column "won" which is TRUE if the Seahawks won the game
# Create a vector of the opponent names corresponding to the games played
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
games
# Create a new column "won" which is TRUE if the Seahawks won the game
games <- data.frame( games, won = (games$points_scored > games$points_received) )
games
# Create a vector of the opponent names corresponding to the games played
opponents <- c( "Broncos", "Bears", "Cowboys", "Cardinals")
opponents
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
games
# View your data frame to see how it has changed!
view(games)
# View your data frame to see how it has changed!
View(games)
# View your data frame to see how it has changed!
colnames("won") <- "Won"
# View your data frame to see how it has changed!
colnames(games)
# View your data frame to see how it has changed!
colnames(games)["won"]
# View your data frame to see how it has changed!
colnames(games)[1]
# View your data frame to see how it has changed!
colnames(games)
# View your data frame to see how it has changed!
rownames(games)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
i <- c(1:100)
i
empoyees <- paste("Emplpyee", i)
employees
employees <- paste("Emplpyee", i)
employees
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Emplpyee", c(1:100))
employees
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif( 100, min = 40000, max = 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif( 100, min = -5000, max = 10000)
salary_adjustments
salaries_2017
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- as.integer( runif( 100, min = 40000, max = 50000) )
salaries_2017
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- as.integer( runif( 100, min = -5000, max = 10000) )
salary_adjustments
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
data <- data.frame( empoyees, salaries_2017, salary_adjustments, stringsAsFactors = F)
View(data)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
data <- data.frame(data, salaries_2018 = (salaries_2017 + salary_adjustments))
data
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
data <- data.frame( data, salary_raise = (salaries_2018 > salaries_2017))
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
data <- data.frame(data, salaries_2018 = (salaries_2017 + salary_adjustments))
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
data <- data.frame( data, salary_raise = (salaries_2018 > salaries_2017))
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
data <- data.frame( data, salary_raise = (data$salaries_2018 > data$salaries_2017))
data
View(data)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Emplpyee", c(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- as.integer( runif( 100, min = 40000, max = 50000) )
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- as.integer( runif( 100, min = -5000, max = 10000) )
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
data <- data.frame( empoyees, salaries_2017, salary_adjustments, stringsAsFactors = F)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
data$salaries_2018 <- c(data$salaries_2017 + data$salary_adjustments)
data
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points_scored <- c( 24, 17, 24, 20 )
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_received <- c( 27, 24, 13, 17 )
# Combine your two vectors into a dataframe called `games`
games <- data.frame( points_scored, points_received )
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff = c(games$points_scored - games$points_received )
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won = c(games$points_scored > games$points_received)
# Create a vector of the opponent names corresponding to the games played
opponents <- c( "Broncos", "Bears", "Cowboys", "Cardinals")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
# View your data frame to see how it has changed!
View(games)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Emplpyee", c(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- as.integer( runif( 100, min = 40000, max = 50000) )
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- as.integer( runif( 100, min = -5000, max = 10000) )
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
data <- data.frame( empoyees, salaries_2017, salary_adjustments, stringsAsFactors = F)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
data$salaries_2018 <- c(data$salaries_2017 + data$salary_adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
data$salary_raise = c(data$salaries_2018 > data$salaries_2017)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
View(data)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", c(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- as.integer( runif( 100, min = 40000, max = 50000) )
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- as.integer( runif( 100, min = -5000, max = 10000) )
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
data <- data.frame( employees, salaries_2017, salary_adjustments, stringsAsFactors = F)
rownames(data) <- employees
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
data$salaries_2018 <- c(data$salaries_2017 + data$salary_adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
data$salary_raise = c(data$salaries_2018 > data$salaries_2017)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
View(data)
# What was the 2018 salary of Employee 57
print(data["Employee 57", "salary_2018"])
# What was the 2018 salary of Employee 57
print(data["Employee 57", "salaries_2018"])
View(data)
# How many employees got a raise?
nrow( data["salary_raise"] == T )
nrow(data)
# How many employees got a raise?
nrow( data["salary_raise" == T] )
# How many employees got a raise?
nrow( data["salary_raise" === T] )
# How many employees got a raise?
nrow( data["salary_raise" == True] )
# How many employees got a raise?
nrow( data["salary_raise" == TRUE] )
# How many employees got a raise?
nrow( data["salary_raise" == FALSE] )
# How many employees got a raise?
nrow( data[ data$salary_raise == FALSE] )
# How many employees got a raise?
nrow( data[ data$salary_raise == FALSE, ] )
# How many employees got a raise?
nrow( data[ data$salary_raise == T, ] )
View(data)
# What was the dollar value of the highest raise?
max(data$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
rownames(data[max(data$salary_adjustments)])
rownames(data[ data$salary_adjustments == max_adjust ])
max_adjust <- max(data$salary_adjustments)
rownames(data[ data$salary_adjustments == max_adjust ])
rownames(data[ data$salary_adjustments == max_adjust, ])
rownames(data[ data$salary_adjustments == max(data$salary_adjustments), ])
# What was the largest decrease in salaries between the two years?
min(data$salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
rownames(data[ data$salary_adjustments == min(data$salary_adjustments), ])
# What was the average salary change?
mean(data$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(data$salary_adjustments[ data$salary_raise == F])
data$salary_adjustments[ data$salary_raise == F]
data$salary_adjustments[ data$salary_raise == F],
View( as.d)
View( as.data.frame(data$salary_adjustments[ data$salary_raise == F]))
setwd("C:/Users/PhilippLuthiger/Projekte/book-exercises/chapter-10-exercises/exercise-2")
# Write a .csv file of your salary data to your working directory
write.csv(data, "salaries.csv")
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data()
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data <- data("USPersonalExpenditure")
View(data)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data <- data(USPersonalExpenditure)
View(data)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data <- data$USPersonalExpenditure
?data
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
dataset <- data( USPersonalExpenditure )
dataset
data()
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data( USPersonalExpenditure )
View(USPersonalExpenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data <- as.data.frame(USPersonalExpenditure)
data
is.data.frame(data)
# What are the column names of your dataframe?
colnames(data)
# What are the row names of your dataframe?
rownames(data)
# Add a column "category" to your data frame that contains the rownames
data$category <- rownames(data)
data
# How much money was spent on personal care in 1940?
print(data["Personal Care", "1940"])
# How much money was spent on Food and Tobacco in 1960?
print(data["Food and Tobacco", "1960"])
# What was the highest expenditure category in 1960?
print( data$category[ data$1960 == max(data$`1960`) ] )
# What was the highest expenditure category in 1960?
print( data$category[ data$1960 == max(data$1960`) ] )
# What was the highest expenditure category in 1960?
print( data$category[ data[["1960"]] == max(data[["1960"]]) ] )
lowest_category <- function( year ){
lowest_category <- data$category[ data[[year]] == min(data[[year]]) ]
}
lowest_category("1940")
lowest_category <- function( year ){
lowest_category <- data$category[ data[[year]] == min(data[[year]]) ]
lowest_category()
}
lowest_category("1940")
lowest_category( year = "1940" )
lowest_category <- function( year ){
lowest_category <- data$category[ data[[year]] == min(data[[year]]) ]
lowest_category
}
lowest_category( year = "1940" )
data
lowest_category( year = "1945" )
lowest_category <- function( year ){
lowest_category <- data$category[ data[[year]] == min(data[[year]]) ]
}
lowest_category( year = "1945" )
lowest_category <- function( year ){
lowest_category <- data$category[ data[[year]] == min(data[[year]]) ]
lowest_category
}
lowest_category( year = "1945" )
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply( colnames(data), lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply( c("1940", "1945", "1950", "1955", "1960"), lowest_category)
setwd("C:/Users/PhilippLuthiger/Projekte/book-exercises/chapter-10-exercises/exercise-4")
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
data <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(data)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- data$organization
organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
colnames(data)
# What was the mean grant value?
print( mean(data$total_amount) )
# What was the dollar amount of the largest grant?
print( max(data$total_amount) )
# What was the dollar amount of the smallest grant?
print( min(data$total_amount) )
# Which organization received the largest grant?
print( data$organization[ data$total_amount == max(data$total_amount) ])
# Which organization received the smallest grant?
print( data$organization[ data$total_amount == min(data$total_amount) ])
# How many grants were awarded in 2010?
print( nrow(data[ data$start_year == 2010]) )
# How many grants were awarded in 2010?
print( nrow(data[ data$start_year == 2010],) )
# How many grants were awarded in 2010?
print( nrow(data[ data$start_year == 2010,]) )
setwd("C:/Users/PhilippLuthiger/Projekte/book-exercises/chapter-10-exercises/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
data <- read.csv("female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
data <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
View(data)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- data[data$year == 2013,]
View(names_2013)
# What was the most popular female name in 2013?
print( names_2013$name[ names_2013$prop == max(names_2013$prop)] )
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function( year ){
most_popular_in_year <- data$name[ data$year == year && data$prop == max(data$prop) ]
most_popular_in_year
}
# What was the most popular female name in 1994?
most_popular_in_year( 1994 )
data$name[ data$year == 2013 && data$prop == max(data$prop) ]
data$name[ data$year == 2013 & data$prop == max(data$prop) ]
data$name[ data$prop == max(data$prop) ]
data$name[ data$prop == max(data$prop[data$year == 2013]) ]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function( year ){
most_popular_in_year <- data$name[ data$prop == max(data$prop[data$year == year]) ]
most_popular_in_year
}
# What was the most popular female name in 1994?
most_popular_in_year( 2013 )
# What was the most popular female name in 1994?
most_popular_in_year( 1994 )
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function( name, year ){
number_in_million <- data$prop[ data$year == year && data$name==name ] * 1000000
number_in_million
}
number_in_million( name="Sophia", year=2013)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function( name, year ){
number_in_million <- data$prop[ data$year == year & data$name==name ] * 1000000
number_in_million
}
number_in_million( name="Sophia", year=2013)
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million( name="Laura", year=1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million( name="Philipp", year=1965)
